// Code generated by MockGen. DO NOT EDIT.
// Source: trigram.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrigramIntf is a mock of TrigramIntf interface.
type MockTrigramIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTrigramIntfMockRecorder
}

// MockTrigramIntfMockRecorder is the mock recorder for MockTrigramIntf.
type MockTrigramIntfMockRecorder struct {
	mock *MockTrigramIntf
}

// NewMockTrigramIntf creates a new mock instance.
func NewMockTrigramIntf(ctrl *gomock.Controller) *MockTrigramIntf {
	mock := &MockTrigramIntf{ctrl: ctrl}
	mock.recorder = &MockTrigramIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrigramIntf) EXPECT() *MockTrigramIntfMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTrigramIntf) Add(doc string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", doc)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTrigramIntfMockRecorder) Add(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTrigramIntf)(nil).Add), doc)
}

// ExtractStringToTrigram mocks base method.
func (m *MockTrigramIntf) ExtractStringToTrigram(str string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractStringToTrigram", str)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExtractStringToTrigram indicates an expected call of ExtractStringToTrigram.
func (mr *MockTrigramIntfMockRecorder) ExtractStringToTrigram(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractStringToTrigram", reflect.TypeOf((*MockTrigramIntf)(nil).ExtractStringToTrigram), str)
}

// Query mocks base method.
func (m *MockTrigramIntf) Query(complexity int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", complexity)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockTrigramIntfMockRecorder) Query(complexity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTrigramIntf)(nil).Query), complexity)
}
